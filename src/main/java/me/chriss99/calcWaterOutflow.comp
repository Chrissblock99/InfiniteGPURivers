#version 450 core
layout(local_size_x = 1, local_size_y = 1) in;
layout(binding = 0, r16f) restrict readonly uniform image2D terrainMap;
layout(binding = 1, r16f) restrict readonly uniform image2D waterMap;
layout(binding = 4, rgba16f) restrict uniform image2D waterOutflowPipes;

const float deltaT = 0.02; //[0;0.05]
const float waterFlowMultiplier = 1; //[0.1;2]

const ivec2 vonNeumannNeighbourhood[4] = ivec2[](
    ivec2( 0,  1),
    ivec2(-1,  0),
    ivec2( 1,  0),
    ivec2( 0, -1)
);

void main() {
    float waterHeight = imageLoad(waterMap, ivec2(gl_GlobalInvocationID)).x;
    float addedHeight = waterHeight + imageLoad(terrainMap, ivec2(gl_GlobalInvocationID)).x;
    float heightDiffs[4];
    for (int i = 0; i < 4; i++)
        heightDiffs[i] = addedHeight -
            (imageLoad(waterMap, ivec2(gl_GlobalInvocationID) + vonNeumannNeighbourhood[i]).x +
            imageLoad(terrainMap, ivec2(gl_GlobalInvocationID) + vonNeumannNeighbourhood[i]).x);
    vec4 heightDiff = vec4(heightDiffs[0], heightDiffs[1], heightDiffs[2], heightDiffs[3]);

    vec4 outflow = imageLoad(waterOutflowPipes, ivec2(gl_GlobalInvocationID));



    outflow = max(vec4(0), outflow + vec4(deltaT) * heightDiff * waterFlowMultiplier);

    float totalOutFlow = outflow.x + outflow.y + outflow.z + outflow.w;
    if (totalOutFlow > waterHeight) {
        float flowScalar = waterHeight / totalOutFlow;
        outflow *= flowScalar;
    }

    imageStore(waterOutflowPipes, ivec2(gl_GlobalInvocationID), outflow);
}