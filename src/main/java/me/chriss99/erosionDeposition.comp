#version 450 core
layout(local_size_x = 1, local_size_y = 1) in;
layout(binding = 0, r32f) restrict uniform image2D terrainMap;
layout(binding = 1, r32f) restrict uniform image2D waterMap;
layout(binding = 2, r32f) restrict uniform image2D sedimentMap;
layout(binding = 3, r32f) restrict uniform image2D hardnessMap;
layout(binding = 4, rgba32f) restrict readonly uniform image2D waterOutflowPipes;

const float deltaT = 0.02; //[0;0.05]
const float sedimentCapacityMultiplier = 1; //[0.1;3]
const float soilSuspensionRate = 0.5; //[0.1;2]
const float sedimentDepositionRate = 1; //[0.1;3]
const float sedimentSofteningRate = 5; //[0;10]
const float maxErosionDepth = 10; //[0;40]
const float minimumHardness = 0.25; //[0;1]
const float voidSediment = 0.3; //[0;1]


const ivec2 vonNeumannNeighbourhood[4] = ivec2[](
    ivec2( 0,  1),
    ivec2(-1,  0),
    ivec2( 1,  0),
    ivec2( 0, -1)
);


const float inverseMaxErosionDepth = 1.0 / maxErosionDepth;
float erosionDepthMultiplier(float depth) {
    if (depth >= maxErosionDepth) return 0;
    if (depth <= 0) return 1;
    return 1 - inverseMaxErosionDepth*depth;
}

void main() {
    vec2 velocity = vec2(0);

    vec4 outflow = imageLoad(waterOutflowPipes, ivec2(gl_GlobalInvocationID));
    velocity.x -= outflow.y;
    velocity.x += outflow.z;
    velocity.y += outflow.x;
    velocity.y -= outflow.w;

    velocity.x += imageLoad(waterOutflowPipes, ivec2(gl_GlobalInvocationID) + vonNeumannNeighbourhood[1]).z;
    velocity.x -= imageLoad(waterOutflowPipes, ivec2(gl_GlobalInvocationID) + vonNeumannNeighbourhood[2]).y;
    velocity.y -= imageLoad(waterOutflowPipes, ivec2(gl_GlobalInvocationID) + vonNeumannNeighbourhood[0]).w;
    velocity.y += imageLoad(waterOutflowPipes, ivec2(gl_GlobalInvocationID) + vonNeumannNeighbourhood[3]).x;

    float terrainHeight = imageLoad(terrainMap, ivec2(gl_GlobalInvocationID)).x;
    float waterHeight = imageLoad(waterMap, ivec2(gl_GlobalInvocationID)).x;
    float sedimentHeight = imageLoad(sedimentMap, ivec2(gl_GlobalInvocationID)).x;
    float hardness = imageLoad(hardnessMap, ivec2(gl_GlobalInvocationID)).x;


    float sedimentCapacity = erosionDepthMultiplier(waterHeight) * sedimentCapacityMultiplier * length(velocity);
    float unusedCapacity = sedimentCapacity - sedimentHeight;

    float change = (unusedCapacity > 0) ?
            deltaT * hardness * soilSuspensionRate * unusedCapacity :
            deltaT * sedimentDepositionRate * unusedCapacity;
    terrainHeight -= change;
    sedimentHeight = max(0, sedimentHeight + change);
    waterHeight    = max(0, waterHeight    + change);

    hardness = max(minimumHardness, hardness - sedimentSofteningRate * change);

    float voided = sedimentHeight * voidSediment;
    sedimentHeight -= voided;
    waterHeight -= voided;


    imageStore(terrainMap,  ivec2(gl_GlobalInvocationID), vec4(terrainHeight));
    imageStore(waterMap,    ivec2(gl_GlobalInvocationID), vec4(waterHeight));
    imageStore(sedimentMap, ivec2(gl_GlobalInvocationID), vec4(sedimentHeight));
    imageStore(hardnessMap, ivec2(gl_GlobalInvocationID), vec4(hardness));
}