#version 450 core
layout(local_size_x = 1, local_size_y = 1) in;
layout(binding = 0, r32f) restrict readonly uniform image2D terrainMap;
layout(binding = 2, r32f) restrict readonly uniform image2D sedimentMap;
layout(binding = 4, rgba32f) restrict readonly uniform image2D waterOutflowPipes;
layout(binding = 6, rgba32f) restrict writeonly uniform image2D sedimentOutflowPipes;


const ivec2 vonNeumannNeighbourhood[4] = ivec2[](
    ivec2( 0,  1),
    ivec2(-1,  0),
    ivec2( 1,  0),
    ivec2( 0, -1)
);


void main() {
    float sedimentHeight = imageLoad(sedimentMap, ivec2(gl_GlobalInvocationID)).x;
    float terrainHeight  = imageLoad(terrainMap,  ivec2(gl_GlobalInvocationID)).x;
    float heightDiffs[4];
    for (int i = 0; i < 4; i++)
        heightDiffs[i] = terrainHeight -
            imageLoad(terrainMap, ivec2(gl_GlobalInvocationID) + vonNeumannNeighbourhood[i]).x;

    vec4 waterOutflow = imageLoad(waterOutflowPipes, ivec2(gl_GlobalInvocationID));
    float waterOutflows[4] = float[](waterOutflow.x, waterOutflow.y, waterOutflow.z, waterOutflow.w);

    float totalOutflow = 0;

    float sedimentOutflows[4];
    for (int i = 0; i < 4; i++) {
        float sedimentOutflow = (heightDiffs[i] >= 0) ? waterOutflows[i] : 0;
        sedimentOutflows[i] = sedimentOutflow;
        totalOutflow += sedimentOutflow;
    }

    vec4 sedimentOutflow = vec4(sedimentOutflows[0], sedimentOutflows[1], sedimentOutflows[2], sedimentOutflows[3]);
    if (totalOutflow > sedimentHeight) {
        float flowScalar = sedimentHeight / totalOutflow;
        sedimentOutflow *= flowScalar;
    }

    imageStore(sedimentOutflowPipes, ivec2(gl_GlobalInvocationID), sedimentOutflow);
}